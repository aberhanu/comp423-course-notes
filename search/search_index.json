{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Abiye's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Hello-Go: Setting Up a Dev Container for Go","text":"<ul> <li> <p>Primary author: Abiye Berhanu</p> </li> <li> <p>Reviewer: Ben Edwards</p> </li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li><code>GitHub</code>: If you don't already have a GitHub account, sign up for one on GitHub.</li> <li><code>Git</code>: Install Git here.</li> <li><code>Visual Studio Code</code>: Download VS Code here.</li> <li><code>Docker</code>: Install Docker so you can run the dev container.</li> </ol>"},{"location":"tutorials/go-setup/#project-setup","title":"Project Setup","text":""},{"location":"tutorials/go-setup/#set-up-a-directory-and-initialize-git","title":"Set up a Directory and Initialize Git:","text":"<ol> <li>Open your command prompt or terminal.</li> <li>Create a new empty directory to host your project  <pre><code>mkdir Hello-Go\ncd Hello-Go\n</code></pre></li> </ol> <p>Note</p> <p>If you wish to open the project in a specific directory, navigate to that directory before running those commands</p> <ol> <li>Initialize a new Git repository: <pre><code>git init\n</code></pre></li> <li>Create a README.md file and make a commit: <pre><code>echo \"# COMP423 Go Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#set-up-a-remote-repository","title":"Set Up a Remote Repository:","text":"<ol> <li>Log into your GitHub account and head to the Create a New Repository page.</li> <li>Include the following information:<ul> <li>Repository Name: Hello-Go</li> <li>Description: \"Creating a Hello World project for Go using a dev container.\"</li> <li>Visibility: Public</li> </ul> </li> <li>Omit setting up the repository with a README.md, .gitignore, or license. </li> <li>Click Create repository</li> </ol>"},{"location":"tutorials/go-setup/#link-your-local-repo-to-github","title":"Link your Local Repo to GitHub:","text":"<ol> <li>Add the GitHub repository as your remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/Hello-Go.git\n</code></pre> Make sure to replace <code>&lt;your-username&gt;</code> with your GitHub username.</li> <li>Check your default branch name to ensure it is <code>main</code>:<ul> <li>To do so run this command:     <pre><code>git branch\n</code></pre><ul> <li>If your default branch name isn't <code>main</code>, then rename it to <code>main</code> by running this subcommand:     <pre><code>git branch -M main\n</code></pre></li> </ul> </li> </ul> </li> </ol> <p><code>main</code> vs <code>master</code>?</p> <p>Old versions of <code>git</code> choose the name <code>master</code> for the primary branch, but these days <code>main</code> is the standard primary branch name.</p> <ol> <li>Push your local commits to the GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></li> <li>If you refresh your web browser, you should see that your local commit has been pushed to the remote repository.</li> </ol>"},{"location":"tutorials/go-setup/#set-up-a-development-dev-container","title":"Set up a Development (Dev) Container","text":""},{"location":"tutorials/go-setup/#add-development-container-configuration","title":"Add Development Container Configuration","text":"<ol> <li>Open the <code>Hello-Go</code> directory in VS Code. You can do this via: File &gt; Open Folder.</li> <li>Install the Dev Containers extension for VS Code.<ul> <li>Go to the Extensions tab and search for the Dev Container extension (By Microsoft)</li> </ul> </li> <li>Create a <code>.devcontainer</code> directory in the root of your project</li> </ol> <p>What does this the <code>.</code> indicate ?</p> <p>The <code>.</code> at the beginning of a directory name or file indicates that it is a hidden directory or file. To see all files and folders in your directory (including hidden ones), run the command <code>ls -a</code> in your terminal.</p> <ol> <li>Within the <code>.devcontainer</code> directory create a <code>devcontainer.json</code> file.<ul> <li>In this file we will specify the configuration for our dev environment as so: <pre><code>{\n    \"name\": \"Hello Go\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\"golang.go\"]\n      }\n    }\n}\n</code></pre></li> </ul> </li> </ol> <p>What does this mean?</p> <p>This configuration: </p> <ul> <li>name: A descriptive name for your dev container.</li> <li>image: The Docker image to use, in this case, the latest version of a Go environment. Microsoft maintains a collection of base images for many programming language environments, but you can also create your own!</li> <li>customizations: Adds useful configurations to VS Code, like installing the Go VS Code plugin (<code>golang.go</code>) extension.<ul> <li>Adding extensions here ensures other developers on your project have them installed in their dev containers automatically.</li> </ul> </li> </ul>"},{"location":"tutorials/go-setup/#opening-your-project-in-a-dev-container","title":"Opening Your Project in a Dev Container:","text":"<ol> <li>Open the VS Code Command Palette:<ul> <li>Mac Users: Press <code>Cmd+Shift+P</code></li> <li>Windows Users: Press <code>Ctrl+Shift+P</code></li> </ul> </li> <li>Type \"Dev Containers: Reopen in Container\" and select the option.<ul> <li>This may take a few minutes as the image downloads.</li> </ul> </li> <li>When the dev container setup is complete, close the current terminal tab, and open a new terminal pane within VS Code.</li> <li>Try the following command:   <pre><code>go version \n</code></pre> If you check, you can see that you are currently running the latest version of go. (Version 1.23.4 as of January 2025)</li> </ol>"},{"location":"tutorials/go-setup/#lets-code","title":"Lets Code!","text":""},{"location":"tutorials/go-setup/#hello-comp423-program","title":"\"Hello COMP423!\" Program","text":"<p>We are now ready to write our first Go Program.</p> <ol> <li>Enable Dependency Tracking:<ul> <li>In your dev container run the <code>go mod init</code> comand like so:</li> </ul> </li> </ol> <pre><code>go mod init example/hello\n</code></pre> <p>Note</p> <p>The <code>go mod init</code> command initiates a new Go module in your project creating a go.mod file that keeps track of the name of your module and the dependencies it uses. </p> <ol> <li> <p>In VS Code create a <code>hello.go</code> file. This is where we will be writing our program. In the <code>hello.go</code> file please paste the following code: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423!\")\n}\n</code></pre></p> <ul> <li>In first line <code>package main</code>: we create the <code>main</code> package. <ul> <li>Packages are a way to group functions and they are made up of all the files within the same directory.</li> </ul> </li> <li>Next with <code>import \"fmt\"</code>: we import the <code>fmt</code> package which is a popular package from the standard library packages. <ul> <li>The <code>fmt</code> package has functions for formatting text, including printing to the console. </li> </ul> </li> <li>Finally we implement a <code>main</code> function to print a message to the console. <ul> <li>A <code>main</code> function executes by default when you run the <code>main</code> package.</li> </ul> </li> </ul> </li> <li> <p>Run your Program:</p> <ul> <li>To see your greeting, use the <code>go run</code> command:</li> </ul> </li> </ol> <pre><code>go run .\n</code></pre>"},{"location":"tutorials/go-setup/#building-and-running-an-executable-go-build","title":"Building and Running an Executable (Go Build)","text":"<p>While the <code>go run</code> command is a useful shortcut for compiling and running a program when you're making frequent changes, it doesn't generate a binary executable.</p> <ul> <li>The <code>go build</code> command compiles the packages, as well as their dependencies, however it doesn't actually install the results.</li> </ul> <p>From the command line in the <code>Hello-Go</code> directory, run the <code>go build</code> command to compile the code into an executable.</p> <p><pre><code>go build\n</code></pre> Finally, run the new <code>./hello</code> executable to confirm that the code works: <pre><code>./hello\n</code></pre></p> <p>Difference between <code>build</code> and <code>run</code>?</p> <p>The <code>go build</code> command is used to compile Go code into an executable binary. This is very similar to how <code>gcc</code> compiles a C program into a runnable file. The command <code>go build</code> writes out a fully independent binary, which then can be executed directly via <code>./binary-name</code>, and is thus reusable and portable. In contrast, <code>go run</code> compiles and runs the code in memory. </p>"},{"location":"tutorials/go-setup/#congrats","title":"Congrats","text":"<p>You succesfully built your first Go program, cheers to many more!</p>"}]}